// THIS CODE WAS GENERATED BY API SERVICE, IT WILL TAKE ERROR IF CHANGE IT!!!!
// if you found any error, please re-generate it by ~/apiscripts/typescript/
// Web foundation Service Api.
/* tslint:disable:max-classes-per-file */
/* tslint:disable:max-line-length */

import ItsApp from '@/generic/ItsApp';

export type Float = number;
export type Double = number;
export type Single = number;
export type Guid = string;
export type DateTime = string;
export type Char = string;
export type Decimal = number;
export type SByte = number;
export type Byte = number;
export type Int16 = number;
export type UInt16 = number;
export type Int32 = number;
export type UInt32 = number;
export type Int64 = number;
export type UInt64 = number;
export type String = string;
export type Boolean = boolean;
export type IHttpActionResult = any;

export interface CountModel {
  module_count: Int32;
}

export class BasicModule {
  constructor(private app: ItsApp) {}

  /** GET  */

  public GetCount(showProgress = true) {
    return this.app.request.get<CountModel>('module', 'count', null, {
      notShowProgress: !showProgress,
    });
  }
}

export interface CountExceptionParameters {
  startTime: string;
  endTime: string;
}
export interface AvgResponseTimeParameters {
  startTime: string;
  endTime: string;
}

export interface GetPerHourParameters {
  startTime?: string;
  endTime?: string;
  apis?: string;
  timeParam?: string;
  isSynthesisStatistics?: boolean;
}
export interface GetTopParameters {
  moduleNames?: string[];
  startTime: string;
  endTime: string;
  isSynthesisStatistics: boolean;
  top: Int32;
}
export interface GetConsumerIPTopParameters {
  moduleNames?: string[];
  startTime: string;
  endTime: string;
  isSynthesisStatistics: boolean;
  top: Int32;
}
export interface GetDetailParameters {
  moduleNames?: string[];
  startTime: string;
  endTime: string;
  isSynthesisStatistics: boolean;
  pageNum: Int32;
  pageSize: Int32;
}
export interface GetApiLogParameters {
  moduleNames?: string[];
  startTime: string;
  endTime: string;
  isSynthesisStatistics: boolean;
  pageNum: Int32;
  pageSize: Int32;
}
export interface TransferModel {
  requestDate: string;
  visit: number;
}
export interface CountExceptionModel {
  exceptionCount: Int32;
}
export interface AvgResponseTimeModel {
  avgResponseTime: Int32;
}
export interface GetPerHourModel {
  name: string;
  value: PerHourValueModel[];
}
export interface PerHourValueModel {
  time: string;
  count: Int32;
}
export interface TopValueModel {
  total: number;
  count: number;
  uri: string;
  percent: number;
}
export interface GetTopModel {
  moduleStatistics: TopValueModel[];
}
export interface ConsumerIPInfoModel {
  serviceName: string;
  userName: string;
}
export interface ConsumerIPTopValueModel {
  total: number;
  count: number;
  ip: string;
  percent: number;
  info: ConsumerIPInfoModel[];
}
export interface GetConsumerIPTopModel {
  moduleStatistics: ConsumerIPTopValueModel[];
}
export interface GetDetailListModel {
  exCount: number;
  avgTime: number;
  method: string;
  count: number;
  moduleName: string;
  chineseName: string;
  uri: string;
}
export interface GetDetailValueModel {
  total: Int32;
  list: GetDetailListModel[];
}
export interface GetDetailModel {
  moduleStatistics: GetDetailValueModel;
}
export interface GetApiLogListModel {
  id: number;
  moduleName: string;
  traceId: string;
  serviceName: string;
  userName: string;
  ip: string;
  uri: string;
  method: string;
  params: string;
  headers: string;
  executionTime: number;
  remark: string;
  flag: boolean;
  createTime: string;
  requestTime: string;
}
export interface GetApiLogValueModel {
  total: Int32;
  list: GetApiLogListModel[];
}
export interface GetApiLogModel {
  moduleStatistics: GetApiLogValueModel;
}

export class AccessModule {
  constructor(private app: ItsApp) {}

  /** GET  */

  public GetCount14(showProgress = true) {
    return this.app.request.get<TransferModel[]>('access/api', 'count14', null, {
      notShowProgress: !showProgress,
    });
  }

  public GetCountException(parameters: CountExceptionParameters, showProgress = true) {
    return this.app.request.get<CountExceptionModel>('access/api', 'countexception', parameters, {
      notShowProgress: !showProgress,
    });
  }
  public GetAvgResponseTime(parameters: AvgResponseTimeParameters, showProgress = true) {
    return this.app.request.get<AvgResponseTimeModel>('access/api', 'avgresponsetime', parameters, {
      notShowProgress: !showProgress,
    });
  }
  /** access/api/perhour */
  public GetPerHour(parameters: GetPerHourParameters, showProgress = true) {
    return this.app.request.get<GetPerHourModel[]>('access/api', 'perhour', parameters, {
      notShowProgress: !showProgress,
    });
  }

  /** access/api/top */
  public GetTop(parameters: GetTopParameters, showProgress = true) {
    return this.app.request.get<GetTopModel>('access/api', 'top', parameters, {
      notShowProgress: !showProgress,
    });
  }
  /** access/consumerip/top */
  public GetConsumerIPTop(parameters: GetConsumerIPTopParameters, showProgress = true) {
    return this.app.request.get<GetConsumerIPTopModel>('access/consumerip', 'top', parameters, {
      notShowProgress: !showProgress,
    });
  }
  /** access/api/detail */
  public GetDetail(parameters: GetDetailParameters, showProgress = true) {
    return this.app.request.get<GetDetailModel>('access/api', 'detail', parameters, {
      notShowProgress: !showProgress,
    });
  }
  /** access/module/apilog */
  public GetApiLog(parameters: GetApiLogParameters, showProgress = true) {
    return this.app.request.get<GetApiLogModel>('access/module', 'apilog', parameters, {
      notShowProgress: !showProgress,
    });
  }
}
export interface HomeDataParameters {
  pageIndex: Int32;
  pageSize: Int32;
}
export interface DBInfoParameters {
  dbName: String;
}
export interface DBSessionStatisticsParameters {
  dbName: String;
}
export interface RecDBSessionStatisticsParameters {
  checkStartTime: String;
  checkEndTime: String;
}
export interface RecDBTablespaceStatisticsParameters {
  checkStartTime: String;
  checkEndTime: String;
  dbName: string;
}
export interface OracleInsStatusModel {
  hostName: String;
  databaseStatus: String;
  instanceName: String;
}
export interface HomeDataModel {
  type: String;
  dbName: String;
  serviceTime: String;
  version: String;
  sessionTotal: Int32;
  sessionActive: Int32;
  oracleInsStatusList: OracleInsStatusModel[];
}
export interface DBInfoModel {
  rtDBDetailInfo: DBDetailInfoModel;
  rtDBInfo: DBBasicInfoModel;
  rtDBTablespaceInfo: DBTablespaceInfoModel;
}
export interface DBDetailInfoModel {
  sessionTotal: String;
  sessionActive: String;
  sessionUsingRate: Double;
  bufferHitRatio: Double;
  softParseRatio: Double;
  memorySortRatio: Double;
  parseExeRatio: Double;
  cpuParseTotalRatio: Double;
  cpuParseRatio: Double;
  blockChangePerTran: Double;
  blockEachRead: Double;
}
export interface DBBasicInfoModel {
  ipAddress: String;
  port: Int32;
  databaseStatus: String;
  version: String;
  startupTime: String;
}
export interface DBTablespaceInfoModel {
  tablespaceName: String;
  totalSize: Double;
  availSize: Double;
  usedRatio: Double;
}

export interface DBSessionStatisticsModel {
  SESSIONTOTAL: Int32;
  TIME: String;
}
export interface RecDBSessionStatisticsValueModel {
  SESSIONTOTAL: Int32;
  TIME: String;
}
export interface RecDBSessionStatisticsModel {
  name: String;
  vlaue: RecDBSessionStatisticsValueModel[];
}

export interface RecDBTablespaceStatisticsValueModel {
  tablespaceName: String;
  availSize: Double;
  usedRatio: Double;
  totalSize: Double;
  checkDay: String;
}
export interface RecDBTablespaceStatisticsModel {
  time: String;
  info: RecDBTablespaceStatisticsValueModel[];
}
export class OracleMonitorModule {
  constructor(private app: ItsApp) {}

  /** GET  */

  public GetHomeData(parameters: HomeDataParameters, showProgress = true) {
    return this.app.request.get<HomeDataModel[]>('oracleMonitor', 'getHomeData', parameters, {
      notShowProgress: !showProgress,
    });
  }

  public GetRtDBInfoByDBName(parameters: DBInfoParameters, showProgress = true) {
    return this.app.request.get<DBInfoModel>('oracleMonitor', 'getRtDBInfoByDBName', parameters, {
      notShowProgress: !showProgress,
    });
  }
  public GetRtDBSessionStatistics(parameters: DBSessionStatisticsParameters, showProgress = true) {
    return this.app.request.get<DBSessionStatisticsModel[]>(
      'oracleMonitor',
      'getRtDBSessionStatistics',
      parameters,
      {
        notShowProgress: !showProgress,
      }
    );
  }

  public GetRecDBSessionStatistics(
    parameters: RecDBSessionStatisticsParameters,
    showProgress = true
  ) {
    return this.app.request.post<RecDBSessionStatisticsModel[]>(
      'oracleMonitor',
      'getRecDBSessionStatistics',
      parameters,
      {
        notShowProgress: !showProgress,
      }
    );
  }
  public GetRecDBTablespaceStatistics(
    parameters: RecDBTablespaceStatisticsParameters,
    showProgress = true
  ) {
    return this.app.request.post<RecDBTablespaceStatisticsModel[]>(
      'oracleMonitor',
      'getRecDBTablespaceStatistics',
      parameters,
      {
        notShowProgress: !showProgress,
      }
    );
  }
}
export interface GetServersInfoModel {
  serverId: String;
  serverIp: String;
  serverName: String;
  osName: String;
  osVersion: String;
  cpuCount: Int32;
  usedCpuRate: Double;
  totalMem: Double;
  usedMem: Double;
  usedMemRate: Double;
  totalSpace: Double;
  totalUsedRate: Double;
}
export class ServerMonitorModule {
  constructor(private app: ItsApp) {}

  /** GET serversMonitor/getServersInfo  */

  public GetServersInfo(showProgress = true) {
    return this.app.request.get<GetServersInfoModel[]>('serversMonitor', 'getServersInfo', null, {
      notShowProgress: !showProgress,
    });
  }
}
